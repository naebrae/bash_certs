#!/bin/bash

if [ "x$1" == "x" ]
then
  echo -e "Usage $0 certificate.common.name [subject.alternate.name] [subject.alternate.ipaddress]\n"
  exit
fi

BASE=`dirname $0`
[[ -f $BASE/config ]] && source $BASE/config || echo "Configuration file $BASE/config was not found"

if [ "${CADB}x" == "x" ]
then
  echo "The Certifcate Authority DataBase folder is not defined. Exiting.."
  exit 1
fi

if [ ! -f ${CADB}/${LOCALCA}.crt ]
then
  echo "${CADB}/${LOCALCA}.crt doesn't exists. Please create it before running this script."
  exit 1
fi

URL=$1
FILE=`echo $URL | sed "s/\./_/g" | sed "s/\*/star/g" | sed 's/\/.*//'`
# Remove /emailAddress if it exists from URL
CN=`echo $URL | sed "s/\/.*//"`
SUBJ="/C=AU/ST=Western Australia/L=Perth/O=Local Lab/CN=$URL"

# If CN is a wildcard, add base domain as SAN.
if [[ $CN = "*."* ]]
then
  SAN="DNS:"`echo $CN | sed "s/\*\.//g"`
else # just add the CN
  SAN="DNS:"$CN
fi

# Add commandline subject alternates
if [ $# -gt 1 ]
then
    sans=($@)
    i=1
    while [ $i -lt ${#sans[@]} ]
    do
        if [[ ${sans[i]} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            SAN=${SAN},"IP:${sans[i]}"
        elif [[ ${sans[i]} =~ ":" ]]; then  # assume IPv6
            SAN=${SAN},"IP:${sans[i]}"
        else
            SAN=${SAN},"DNS:${sans[i]}"
        fi
        i=$[$i+1]
    done
fi

openssl req -newkey rsa:2048 -nodes \
  -keyout "$FILE.key" \
  -out "$FILE.csr" \
  -subj "$SUBJ"

REQFILE="$FILE.csr"
# openssl 1.0.x -> subject=/C=AU/ST=Western Australia/L=Perth/O=Local/OU=Lab/CN=www.lab.local/emailAddress=email@domain
# openssl 1.1.x -> subject=C = AU, ST = Western Australia, L = Perth, O = Local, OU = Lab, CN = www.lab.local, emailAddress = email@domain

COUNTRY=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*C=//p' | sed 's/\/.*//' | sed 's/,.*//'` 
STATE=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*ST=//p' | sed 's/\/.*//' | sed 's/,.*//'`
LOCATION=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*L=//p' | sed 's/\/.*//' | sed 's/,.*//'`
ORG=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*O=//p' | sed 's/\/.*//' | sed 's/,.*//'`
ORGUNIT=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*OU=//p' | sed 's/\/.*//' | sed 's/,.*//'`
CN=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*CN=//p' | sed 's/\/.*//' | sed 's/,.*//'`
EMAIL=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*emailAddress=//p' | sed 's/\/.*//' | sed 's/,.*//'`

NEWSUBJ="/C=${COUNTRY}/ST=${STATE}/L=${LOCATION}/O=${ORG}/OU=${ORGUNIT}/CN=${CN}/emailAddress=${EMAIL}"

openssl ca -batch -days $DAYS \
  -in "${FILE}.csr" \
  -out "${FILE}.crt" \
  -subj "${NEWSUBJ}" \
  -keyfile ${CADB}/${LOCALCA}.key \
  -cert ${CADB}/${LOCALCA}.crt \
  -name local_CA \
  -config <(cat \
  <(printf "[ local_CA ]\n") \
  <(printf "database=${CADB}/${LOCALCA}.idx\n") \
  <(printf "unique_subject=no\n") \
  <(printf "default_md=sha256\n") \
  <(printf "serial=${CADB}/${LOCALCA}.srl\n") \
  <(printf "new_certs_dir=${CADB}/\n") \
  <(printf "policy=policy_OV\n") \
  <(printf "[ policy_OV ]\n") \
  <(printf "countryName=supplied\n") \
  <(printf "stateOrProvinceName=supplied\n") \
  <(printf "localityName=supplied\n") \
  <(printf "organizationName=supplied\n") \
  <(printf "organizationalUnitName=optional\n") \
  <(printf "commonName=supplied\n") \
  <(printf "emailAddress=optional\n") \
  ) \
  -extensions exts \
  -extfile <(cat \
  <(printf "[ exts ]\n") \
  <(printf "authorityKeyIdentifier=keyid:always,issuer\n") \
  <(printf "subjectKeyIdentifier=hash\n") \
  <(printf "subjectAltName=email:move,$SAN\n") \
  <(printf "keyUsage=critical,digitalSignature,keyEncipherment\n") \
  <(printf "extendedKeyUsage=serverAuth,clientAuth\n") \
  <(printf "basicConstraints=critical,CA:false\n") \
  <(printf "authorityInfoAccess=OCSP;URI:${LOCALCA_OCSP},caIssuers;URI:${LOCALCA_CRT_URI}\n") \
  <(printf "crlDistributionPoints=URI:${LOCALCA_CRL_URI}\n") \
  <(printf "certificatePolicies=2.23.140.1.2.2\n") \
  )

openssl verify -CAfile <(cat ${CADB}/${LOCALCA}.crt ${CADB}/${ROOTCA}.crt) $FILE.crt
